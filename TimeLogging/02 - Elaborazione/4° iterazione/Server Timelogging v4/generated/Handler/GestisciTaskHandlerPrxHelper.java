// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `creaTaskHandler.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Handler;

public final class GestisciTaskHandlerPrxHelper extends Ice.ObjectPrxHelperBase implements GestisciTaskHandlerPrx
{
    private static final String __aggiornaElencoDipendenti_name = "aggiornaElencoDipendenti";

    public java.util.List<String[]> aggiornaElencoDipendenti(java.util.List<String[]> elencoDip, int idDipendente, String unita, double quantita)
    {
        return aggiornaElencoDipendenti(elencoDip, idDipendente, unita, quantita, null, false);
    }

    public java.util.List<String[]> aggiornaElencoDipendenti(java.util.List<String[]> elencoDip, int idDipendente, String unita, double quantita, java.util.Map<String, String> __ctx)
    {
        return aggiornaElencoDipendenti(elencoDip, idDipendente, unita, quantita, __ctx, true);
    }

    private java.util.List<String[]> aggiornaElencoDipendenti(java.util.List<String[]> elencoDip, int idDipendente, String unita, double quantita, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "aggiornaElencoDipendenti", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("aggiornaElencoDipendenti");
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    return __del.aggiornaElencoDipendenti(elencoDip, idDipendente, unita, quantita, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_aggiornaElencoDipendenti(java.util.List<String[]> elencoDip, int idDipendente, String unita, double quantita)
    {
        return begin_aggiornaElencoDipendenti(elencoDip, idDipendente, unita, quantita, null, false, null);
    }

    public Ice.AsyncResult begin_aggiornaElencoDipendenti(java.util.List<String[]> elencoDip, int idDipendente, String unita, double quantita, java.util.Map<String, String> __ctx)
    {
        return begin_aggiornaElencoDipendenti(elencoDip, idDipendente, unita, quantita, __ctx, true, null);
    }

    public Ice.AsyncResult begin_aggiornaElencoDipendenti(java.util.List<String[]> elencoDip, int idDipendente, String unita, double quantita, Ice.Callback __cb)
    {
        return begin_aggiornaElencoDipendenti(elencoDip, idDipendente, unita, quantita, null, false, __cb);
    }

    public Ice.AsyncResult begin_aggiornaElencoDipendenti(java.util.List<String[]> elencoDip, int idDipendente, String unita, double quantita, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_aggiornaElencoDipendenti(elencoDip, idDipendente, unita, quantita, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_aggiornaElencoDipendenti(java.util.List<String[]> elencoDip, int idDipendente, String unita, double quantita, Callback_GestisciTaskHandler_aggiornaElencoDipendenti __cb)
    {
        return begin_aggiornaElencoDipendenti(elencoDip, idDipendente, unita, quantita, null, false, __cb);
    }

    public Ice.AsyncResult begin_aggiornaElencoDipendenti(java.util.List<String[]> elencoDip, int idDipendente, String unita, double quantita, java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_aggiornaElencoDipendenti __cb)
    {
        return begin_aggiornaElencoDipendenti(elencoDip, idDipendente, unita, quantita, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_aggiornaElencoDipendenti(java.util.List<String[]> elencoDip, int idDipendente, String unita, double quantita, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__aggiornaElencoDipendenti_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __aggiornaElencoDipendenti_name, __cb);
        try
        {
            __result.__prepare(__aggiornaElencoDipendenti_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            IntArrayListHelper.write(__os, elencoDip);
            __os.writeInt(idDipendente);
            __os.writeString(unita);
            __os.writeDouble(quantita);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<String[]> end_aggiornaElencoDipendenti(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __aggiornaElencoDipendenti_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.List<String[]> __ret;
            __ret = IntArrayListHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __aggiungiDipendente_name = "aggiungiDipendente";

    public void aggiungiDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita)
    {
        aggiungiDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, null, false);
    }

    public void aggiungiDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, java.util.Map<String, String> __ctx)
    {
        aggiungiDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, __ctx, true);
    }

    private void aggiungiDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "aggiungiDipendente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    __del.aggiungiDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_aggiungiDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita)
    {
        return begin_aggiungiDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, null, false, null);
    }

    public Ice.AsyncResult begin_aggiungiDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, java.util.Map<String, String> __ctx)
    {
        return begin_aggiungiDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, __ctx, true, null);
    }

    public Ice.AsyncResult begin_aggiungiDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, Ice.Callback __cb)
    {
        return begin_aggiungiDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, null, false, __cb);
    }

    public Ice.AsyncResult begin_aggiungiDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_aggiungiDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_aggiungiDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, Callback_GestisciTaskHandler_aggiungiDipendente __cb)
    {
        return begin_aggiungiDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, null, false, __cb);
    }

    public Ice.AsyncResult begin_aggiungiDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_aggiungiDipendente __cb)
    {
        return begin_aggiungiDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_aggiungiDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __aggiungiDipendente_name, __cb);
        try
        {
            __result.__prepare(__aggiungiDipendente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(aNomeProgetto);
            __os.writeString(aNomeSottoprogetto);
            __os.writeString(nomeTask);
            __os.writeInt(IdDipendente);
            __os.writeString(unita);
            __os.writeDouble(quantita);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_aggiungiDipendente(Ice.AsyncResult __result)
    {
        __end(__result, __aggiungiDipendente_name);
    }

    private static final String __cancellaTask_name = "cancellaTask";

    public void cancellaTask(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask)
    {
        cancellaTask(aNomeProgetto, aNomeSottoprogetto, nomeTask, null, false);
    }

    public void cancellaTask(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx)
    {
        cancellaTask(aNomeProgetto, aNomeSottoprogetto, nomeTask, __ctx, true);
    }

    private void cancellaTask(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "cancellaTask", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    __del.cancellaTask(aNomeProgetto, aNomeSottoprogetto, nomeTask, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_cancellaTask(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask)
    {
        return begin_cancellaTask(aNomeProgetto, aNomeSottoprogetto, nomeTask, null, false, null);
    }

    public Ice.AsyncResult begin_cancellaTask(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx)
    {
        return begin_cancellaTask(aNomeProgetto, aNomeSottoprogetto, nomeTask, __ctx, true, null);
    }

    public Ice.AsyncResult begin_cancellaTask(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, Ice.Callback __cb)
    {
        return begin_cancellaTask(aNomeProgetto, aNomeSottoprogetto, nomeTask, null, false, __cb);
    }

    public Ice.AsyncResult begin_cancellaTask(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_cancellaTask(aNomeProgetto, aNomeSottoprogetto, nomeTask, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_cancellaTask(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, Callback_GestisciTaskHandler_cancellaTask __cb)
    {
        return begin_cancellaTask(aNomeProgetto, aNomeSottoprogetto, nomeTask, null, false, __cb);
    }

    public Ice.AsyncResult begin_cancellaTask(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_cancellaTask __cb)
    {
        return begin_cancellaTask(aNomeProgetto, aNomeSottoprogetto, nomeTask, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_cancellaTask(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __cancellaTask_name, __cb);
        try
        {
            __result.__prepare(__cancellaTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(aNomeProgetto);
            __os.writeString(aNomeSottoprogetto);
            __os.writeString(nomeTask);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_cancellaTask(Ice.AsyncResult __result)
    {
        __end(__result, __cancellaTask_name);
    }

    private static final String __creaTask_name = "creaTask";

    public void creaTask(String NomeProgetto, String NomeSottoprogetto, String Descrizione, java.util.List<String[]> IdDipendente, String nomeTask)
    {
        creaTask(NomeProgetto, NomeSottoprogetto, Descrizione, IdDipendente, nomeTask, null, false);
    }

    public void creaTask(String NomeProgetto, String NomeSottoprogetto, String Descrizione, java.util.List<String[]> IdDipendente, String nomeTask, java.util.Map<String, String> __ctx)
    {
        creaTask(NomeProgetto, NomeSottoprogetto, Descrizione, IdDipendente, nomeTask, __ctx, true);
    }

    private void creaTask(String NomeProgetto, String NomeSottoprogetto, String Descrizione, java.util.List<String[]> IdDipendente, String nomeTask, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "creaTask", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    __del.creaTask(NomeProgetto, NomeSottoprogetto, Descrizione, IdDipendente, nomeTask, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_creaTask(String NomeProgetto, String NomeSottoprogetto, String Descrizione, java.util.List<String[]> IdDipendente, String nomeTask)
    {
        return begin_creaTask(NomeProgetto, NomeSottoprogetto, Descrizione, IdDipendente, nomeTask, null, false, null);
    }

    public Ice.AsyncResult begin_creaTask(String NomeProgetto, String NomeSottoprogetto, String Descrizione, java.util.List<String[]> IdDipendente, String nomeTask, java.util.Map<String, String> __ctx)
    {
        return begin_creaTask(NomeProgetto, NomeSottoprogetto, Descrizione, IdDipendente, nomeTask, __ctx, true, null);
    }

    public Ice.AsyncResult begin_creaTask(String NomeProgetto, String NomeSottoprogetto, String Descrizione, java.util.List<String[]> IdDipendente, String nomeTask, Ice.Callback __cb)
    {
        return begin_creaTask(NomeProgetto, NomeSottoprogetto, Descrizione, IdDipendente, nomeTask, null, false, __cb);
    }

    public Ice.AsyncResult begin_creaTask(String NomeProgetto, String NomeSottoprogetto, String Descrizione, java.util.List<String[]> IdDipendente, String nomeTask, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_creaTask(NomeProgetto, NomeSottoprogetto, Descrizione, IdDipendente, nomeTask, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_creaTask(String NomeProgetto, String NomeSottoprogetto, String Descrizione, java.util.List<String[]> IdDipendente, String nomeTask, Callback_GestisciTaskHandler_creaTask __cb)
    {
        return begin_creaTask(NomeProgetto, NomeSottoprogetto, Descrizione, IdDipendente, nomeTask, null, false, __cb);
    }

    public Ice.AsyncResult begin_creaTask(String NomeProgetto, String NomeSottoprogetto, String Descrizione, java.util.List<String[]> IdDipendente, String nomeTask, java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_creaTask __cb)
    {
        return begin_creaTask(NomeProgetto, NomeSottoprogetto, Descrizione, IdDipendente, nomeTask, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_creaTask(String NomeProgetto, String NomeSottoprogetto, String Descrizione, java.util.List<String[]> IdDipendente, String nomeTask, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __creaTask_name, __cb);
        try
        {
            __result.__prepare(__creaTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(NomeProgetto);
            __os.writeString(NomeSottoprogetto);
            __os.writeString(Descrizione);
            IntArrayListHelper.write(__os, IdDipendente);
            __os.writeString(nomeTask);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_creaTask(Ice.AsyncResult __result)
    {
        __end(__result, __creaTask_name);
    }

    private static final String __eliminaDipendente_name = "eliminaDipendente";

    public void eliminaDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente)
    {
        eliminaDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, null, false);
    }

    public void eliminaDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, java.util.Map<String, String> __ctx)
    {
        eliminaDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, __ctx, true);
    }

    private void eliminaDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "eliminaDipendente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    __del.eliminaDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_eliminaDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente)
    {
        return begin_eliminaDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, null, false, null);
    }

    public Ice.AsyncResult begin_eliminaDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, java.util.Map<String, String> __ctx)
    {
        return begin_eliminaDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_eliminaDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, Ice.Callback __cb)
    {
        return begin_eliminaDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_eliminaDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_eliminaDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_eliminaDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, Callback_GestisciTaskHandler_eliminaDipendente __cb)
    {
        return begin_eliminaDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_eliminaDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_eliminaDipendente __cb)
    {
        return begin_eliminaDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_eliminaDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __eliminaDipendente_name, __cb);
        try
        {
            __result.__prepare(__eliminaDipendente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(aNomeProgetto);
            __os.writeString(aNomeSottoprogetto);
            __os.writeString(nomeTask);
            __os.writeInt(IdDipendente);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_eliminaDipendente(Ice.AsyncResult __result)
    {
        __end(__result, __eliminaDipendente_name);
    }

    private static final String __getDipendenti_name = "getDipendenti";

    public String getDipendenti()
    {
        return getDipendenti(null, false);
    }

    public String getDipendenti(java.util.Map<String, String> __ctx)
    {
        return getDipendenti(__ctx, true);
    }

    private String getDipendenti(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDipendenti", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDipendenti");
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    return __del.getDipendenti(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getDipendenti()
    {
        return begin_getDipendenti(null, false, null);
    }

    public Ice.AsyncResult begin_getDipendenti(java.util.Map<String, String> __ctx)
    {
        return begin_getDipendenti(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getDipendenti(Ice.Callback __cb)
    {
        return begin_getDipendenti(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDipendenti(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDipendenti(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDipendenti(Callback_GestisciTaskHandler_getDipendenti __cb)
    {
        return begin_getDipendenti(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDipendenti(java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_getDipendenti __cb)
    {
        return begin_getDipendenti(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDipendenti(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDipendenti_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDipendenti_name, __cb);
        try
        {
            __result.__prepare(__getDipendenti_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getDipendenti(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getDipendenti_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getInfoSottoprogetto_name = "getInfoSottoprogetto";

    public String getInfoSottoprogetto(String nomeProgetto, String nomeSottoprogetto)
    {
        return getInfoSottoprogetto(nomeProgetto, nomeSottoprogetto, null, false);
    }

    public String getInfoSottoprogetto(String nomeProgetto, String nomeSottoprogetto, java.util.Map<String, String> __ctx)
    {
        return getInfoSottoprogetto(nomeProgetto, nomeSottoprogetto, __ctx, true);
    }

    private String getInfoSottoprogetto(String nomeProgetto, String nomeSottoprogetto, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getInfoSottoprogetto", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getInfoSottoprogetto");
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    return __del.getInfoSottoprogetto(nomeProgetto, nomeSottoprogetto, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getInfoSottoprogetto(String nomeProgetto, String nomeSottoprogetto)
    {
        return begin_getInfoSottoprogetto(nomeProgetto, nomeSottoprogetto, null, false, null);
    }

    public Ice.AsyncResult begin_getInfoSottoprogetto(String nomeProgetto, String nomeSottoprogetto, java.util.Map<String, String> __ctx)
    {
        return begin_getInfoSottoprogetto(nomeProgetto, nomeSottoprogetto, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getInfoSottoprogetto(String nomeProgetto, String nomeSottoprogetto, Ice.Callback __cb)
    {
        return begin_getInfoSottoprogetto(nomeProgetto, nomeSottoprogetto, null, false, __cb);
    }

    public Ice.AsyncResult begin_getInfoSottoprogetto(String nomeProgetto, String nomeSottoprogetto, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInfoSottoprogetto(nomeProgetto, nomeSottoprogetto, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getInfoSottoprogetto(String nomeProgetto, String nomeSottoprogetto, Callback_GestisciTaskHandler_getInfoSottoprogetto __cb)
    {
        return begin_getInfoSottoprogetto(nomeProgetto, nomeSottoprogetto, null, false, __cb);
    }

    public Ice.AsyncResult begin_getInfoSottoprogetto(String nomeProgetto, String nomeSottoprogetto, java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_getInfoSottoprogetto __cb)
    {
        return begin_getInfoSottoprogetto(nomeProgetto, nomeSottoprogetto, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getInfoSottoprogetto(String nomeProgetto, String nomeSottoprogetto, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInfoSottoprogetto_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getInfoSottoprogetto_name, __cb);
        try
        {
            __result.__prepare(__getInfoSottoprogetto_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nomeProgetto);
            __os.writeString(nomeSottoprogetto);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getInfoSottoprogetto(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getInfoSottoprogetto_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getInfoTask_name = "getInfoTask";

    public String getInfoTask(String nomeProgetto, String nomeSottoprogetto, String nomeTask)
    {
        return getInfoTask(nomeProgetto, nomeSottoprogetto, nomeTask, null, false);
    }

    public String getInfoTask(String nomeProgetto, String nomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx)
    {
        return getInfoTask(nomeProgetto, nomeSottoprogetto, nomeTask, __ctx, true);
    }

    private String getInfoTask(String nomeProgetto, String nomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getInfoTask", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getInfoTask");
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    return __del.getInfoTask(nomeProgetto, nomeSottoprogetto, nomeTask, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getInfoTask(String nomeProgetto, String nomeSottoprogetto, String nomeTask)
    {
        return begin_getInfoTask(nomeProgetto, nomeSottoprogetto, nomeTask, null, false, null);
    }

    public Ice.AsyncResult begin_getInfoTask(String nomeProgetto, String nomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx)
    {
        return begin_getInfoTask(nomeProgetto, nomeSottoprogetto, nomeTask, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getInfoTask(String nomeProgetto, String nomeSottoprogetto, String nomeTask, Ice.Callback __cb)
    {
        return begin_getInfoTask(nomeProgetto, nomeSottoprogetto, nomeTask, null, false, __cb);
    }

    public Ice.AsyncResult begin_getInfoTask(String nomeProgetto, String nomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInfoTask(nomeProgetto, nomeSottoprogetto, nomeTask, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getInfoTask(String nomeProgetto, String nomeSottoprogetto, String nomeTask, Callback_GestisciTaskHandler_getInfoTask __cb)
    {
        return begin_getInfoTask(nomeProgetto, nomeSottoprogetto, nomeTask, null, false, __cb);
    }

    public Ice.AsyncResult begin_getInfoTask(String nomeProgetto, String nomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_getInfoTask __cb)
    {
        return begin_getInfoTask(nomeProgetto, nomeSottoprogetto, nomeTask, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getInfoTask(String nomeProgetto, String nomeSottoprogetto, String nomeTask, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInfoTask_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getInfoTask_name, __cb);
        try
        {
            __result.__prepare(__getInfoTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nomeProgetto);
            __os.writeString(nomeSottoprogetto);
            __os.writeString(nomeTask);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getInfoTask(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getInfoTask_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getSottoprogetti_name = "getSottoprogetti";

    public String getSottoprogetti(int idManager)
    {
        return getSottoprogetti(idManager, null, false);
    }

    public String getSottoprogetti(int idManager, java.util.Map<String, String> __ctx)
    {
        return getSottoprogetti(idManager, __ctx, true);
    }

    private String getSottoprogetti(int idManager, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSottoprogetti", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSottoprogetti");
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    return __del.getSottoprogetti(idManager, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSottoprogetti(int idManager)
    {
        return begin_getSottoprogetti(idManager, null, false, null);
    }

    public Ice.AsyncResult begin_getSottoprogetti(int idManager, java.util.Map<String, String> __ctx)
    {
        return begin_getSottoprogetti(idManager, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getSottoprogetti(int idManager, Ice.Callback __cb)
    {
        return begin_getSottoprogetti(idManager, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSottoprogetti(int idManager, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSottoprogetti(idManager, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSottoprogetti(int idManager, Callback_GestisciTaskHandler_getSottoprogetti __cb)
    {
        return begin_getSottoprogetti(idManager, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSottoprogetti(int idManager, java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_getSottoprogetti __cb)
    {
        return begin_getSottoprogetti(idManager, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSottoprogetti(int idManager, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSottoprogetti_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSottoprogetti_name, __cb);
        try
        {
            __result.__prepare(__getSottoprogetti_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(idManager);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getSottoprogetti(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSottoprogetti_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __modificaTask_name = "modificaTask";

    public void modificaTask(String aNomeProgetto, String aNomeSottoprogetto, String aDescrizione, String nomeTask, String oldNomeTask)
    {
        modificaTask(aNomeProgetto, aNomeSottoprogetto, aDescrizione, nomeTask, oldNomeTask, null, false);
    }

    public void modificaTask(String aNomeProgetto, String aNomeSottoprogetto, String aDescrizione, String nomeTask, String oldNomeTask, java.util.Map<String, String> __ctx)
    {
        modificaTask(aNomeProgetto, aNomeSottoprogetto, aDescrizione, nomeTask, oldNomeTask, __ctx, true);
    }

    private void modificaTask(String aNomeProgetto, String aNomeSottoprogetto, String aDescrizione, String nomeTask, String oldNomeTask, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "modificaTask", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    __del.modificaTask(aNomeProgetto, aNomeSottoprogetto, aDescrizione, nomeTask, oldNomeTask, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_modificaTask(String aNomeProgetto, String aNomeSottoprogetto, String aDescrizione, String nomeTask, String oldNomeTask)
    {
        return begin_modificaTask(aNomeProgetto, aNomeSottoprogetto, aDescrizione, nomeTask, oldNomeTask, null, false, null);
    }

    public Ice.AsyncResult begin_modificaTask(String aNomeProgetto, String aNomeSottoprogetto, String aDescrizione, String nomeTask, String oldNomeTask, java.util.Map<String, String> __ctx)
    {
        return begin_modificaTask(aNomeProgetto, aNomeSottoprogetto, aDescrizione, nomeTask, oldNomeTask, __ctx, true, null);
    }

    public Ice.AsyncResult begin_modificaTask(String aNomeProgetto, String aNomeSottoprogetto, String aDescrizione, String nomeTask, String oldNomeTask, Ice.Callback __cb)
    {
        return begin_modificaTask(aNomeProgetto, aNomeSottoprogetto, aDescrizione, nomeTask, oldNomeTask, null, false, __cb);
    }

    public Ice.AsyncResult begin_modificaTask(String aNomeProgetto, String aNomeSottoprogetto, String aDescrizione, String nomeTask, String oldNomeTask, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_modificaTask(aNomeProgetto, aNomeSottoprogetto, aDescrizione, nomeTask, oldNomeTask, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_modificaTask(String aNomeProgetto, String aNomeSottoprogetto, String aDescrizione, String nomeTask, String oldNomeTask, Callback_GestisciTaskHandler_modificaTask __cb)
    {
        return begin_modificaTask(aNomeProgetto, aNomeSottoprogetto, aDescrizione, nomeTask, oldNomeTask, null, false, __cb);
    }

    public Ice.AsyncResult begin_modificaTask(String aNomeProgetto, String aNomeSottoprogetto, String aDescrizione, String nomeTask, String oldNomeTask, java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_modificaTask __cb)
    {
        return begin_modificaTask(aNomeProgetto, aNomeSottoprogetto, aDescrizione, nomeTask, oldNomeTask, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_modificaTask(String aNomeProgetto, String aNomeSottoprogetto, String aDescrizione, String nomeTask, String oldNomeTask, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __modificaTask_name, __cb);
        try
        {
            __result.__prepare(__modificaTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(aNomeProgetto);
            __os.writeString(aNomeSottoprogetto);
            __os.writeString(aDescrizione);
            __os.writeString(nomeTask);
            __os.writeString(oldNomeTask);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_modificaTask(Ice.AsyncResult __result)
    {
        __end(__result, __modificaTask_name);
    }

    private static final String __sostituisciDipendente_name = "sostituisciDipendente";

    public void sostituisciDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, int IdDipendenteOld)
    {
        sostituisciDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, IdDipendenteOld, null, false);
    }

    public void sostituisciDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, int IdDipendenteOld, java.util.Map<String, String> __ctx)
    {
        sostituisciDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, IdDipendenteOld, __ctx, true);
    }

    private void sostituisciDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, int IdDipendenteOld, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "sostituisciDipendente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _GestisciTaskHandlerDel __del = (_GestisciTaskHandlerDel)__delBase;
                    __del.sostituisciDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, IdDipendenteOld, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_sostituisciDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, int IdDipendenteOld)
    {
        return begin_sostituisciDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, IdDipendenteOld, null, false, null);
    }

    public Ice.AsyncResult begin_sostituisciDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, int IdDipendenteOld, java.util.Map<String, String> __ctx)
    {
        return begin_sostituisciDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, IdDipendenteOld, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sostituisciDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, int IdDipendenteOld, Ice.Callback __cb)
    {
        return begin_sostituisciDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, IdDipendenteOld, null, false, __cb);
    }

    public Ice.AsyncResult begin_sostituisciDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, int IdDipendenteOld, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sostituisciDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, IdDipendenteOld, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sostituisciDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, int IdDipendenteOld, Callback_GestisciTaskHandler_sostituisciDipendente __cb)
    {
        return begin_sostituisciDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, IdDipendenteOld, null, false, __cb);
    }

    public Ice.AsyncResult begin_sostituisciDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, int IdDipendenteOld, java.util.Map<String, String> __ctx, Callback_GestisciTaskHandler_sostituisciDipendente __cb)
    {
        return begin_sostituisciDipendente(aNomeProgetto, aNomeSottoprogetto, nomeTask, IdDipendente, unita, quantita, IdDipendenteOld, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sostituisciDipendente(String aNomeProgetto, String aNomeSottoprogetto, String nomeTask, int IdDipendente, String unita, double quantita, int IdDipendenteOld, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sostituisciDipendente_name, __cb);
        try
        {
            __result.__prepare(__sostituisciDipendente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(aNomeProgetto);
            __os.writeString(aNomeSottoprogetto);
            __os.writeString(nomeTask);
            __os.writeInt(IdDipendente);
            __os.writeString(unita);
            __os.writeDouble(quantita);
            __os.writeInt(IdDipendenteOld);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sostituisciDipendente(Ice.AsyncResult __result)
    {
        __end(__result, __sostituisciDipendente_name);
    }

    public static GestisciTaskHandlerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        GestisciTaskHandlerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof GestisciTaskHandlerPrx)
            {
                __d = (GestisciTaskHandlerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    GestisciTaskHandlerPrxHelper __h = new GestisciTaskHandlerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static GestisciTaskHandlerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        GestisciTaskHandlerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof GestisciTaskHandlerPrx)
            {
                __d = (GestisciTaskHandlerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    GestisciTaskHandlerPrxHelper __h = new GestisciTaskHandlerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static GestisciTaskHandlerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        GestisciTaskHandlerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    GestisciTaskHandlerPrxHelper __h = new GestisciTaskHandlerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static GestisciTaskHandlerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        GestisciTaskHandlerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    GestisciTaskHandlerPrxHelper __h = new GestisciTaskHandlerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static GestisciTaskHandlerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        GestisciTaskHandlerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof GestisciTaskHandlerPrx)
            {
                __d = (GestisciTaskHandlerPrx)__obj;
            }
            else
            {
                GestisciTaskHandlerPrxHelper __h = new GestisciTaskHandlerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static GestisciTaskHandlerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        GestisciTaskHandlerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            GestisciTaskHandlerPrxHelper __h = new GestisciTaskHandlerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Handler::GestisciTaskHandler",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _GestisciTaskHandlerDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _GestisciTaskHandlerDelD();
    }

    public static void __write(IceInternal.BasicStream __os, GestisciTaskHandlerPrx v)
    {
        __os.writeProxy(v);
    }

    public static GestisciTaskHandlerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            GestisciTaskHandlerPrxHelper result = new GestisciTaskHandlerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
